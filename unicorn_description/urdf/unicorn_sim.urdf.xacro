<?xml version="1.0" encoding="utf-8"?>


<robot name="unicorn" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <xacro:arg name="robot_namespace" default="/" />
  <xacro:arg name="sim" default="true" />

    <!-- Swivel wheel -->
  <xacro:include filename="$(find unicorn_description)/urdf/swivel_wheel.urdf.xacro" />

    <!-- Wheel -->
  <xacro:include filename="$(find unicorn_description)/urdf/wheel.urdf.xacro" />

    <!-- camera pack-->
  <xacro:include filename="$(find unicorn_description)/urdf/stereo_camera_gazebo.urdf.xacro" />

   <!-- lidar pack-->
  <xacro:include filename="$(find unicorn_description)/urdf/lidar_gazebo.urdf.xacro" />

  <xacro:property name="M_PI" value="3.1415926535897931" />
  <xacro:property name="M_PI2" value="1.57079632679" />
  <!-- base --><!--
    <xacro:property name="base_x_size" value="0.72" />
  <xacro:property name="base_y_size" value="0.55" />
  <xacro:property name="base_z_size" value="0.6" />
  <xacro:property name="base_mass" value="21.446" /> 21.446 in kg-->

    <!-- Main Body-base -->
  <xacro:property name="base_x_size" value="0.72" />
  <xacro:property name="base_y_size" value="0.55" />
  <xacro:property name="base_z_size" value="0.23" />
  <xacro:property name="base_mass" value="15" /> <!-- in kg-->

    <!--Inertial macros for the box and cylinder. Units are kg*m^2-->
  <xacro:macro name="box_inertia" params="m x y z">
    <inertia ixx="${m*(y*y+z*z)/12}" ixy="0" ixz="0"
             iyy="${m*(x*x+z*z)/12}" iyz="0"
             izz="${m*(x*x+z*z)/12}" />
  </xacro:macro>

  <!-- Front Lidar -->
  <xacro:arg name="laser_xyz" default="-0.0214 -0.0049 0.465" />
  <xacro:arg name="laser_rpy" default="0 0 0" />
  <xacro:arg name="frontlidar_meshfile" default="package://unicorn_description/meshes/base_laser.STL" />

<!-- Rear Lidar  -->
  <xacro:arg name="rear_laser_xyz" default="-0.42145 -0.00645 0.28652" />
  <xacro:arg name="rear_laser_rpy" default="0 0 ${M_PI}" />
  <xacro:arg name="rearlidar_meshfile" default="package://unicorn_description/meshes/rear_lidar.STL" />

  <!-- Zed Camera -->
  <xacro:arg name="zed_xyz" default="0.03112 -0.00552 0.36395" />
  <xacro:arg name="zed_rpy" default="0 0 0" />
  <xacro:arg name="zed_meshfile" default="package://unicorn_description/meshes/zed_link.STL" />

  <!-- Real Sense -->
  <xacro:arg name="real_base" default="${-0.4065-0.025} ${-0.03882+0.015} 0.33658" />
  <xacro:arg name="real_rgb_xyz" default="0 0.015 0" />
  <xacro:arg name="real_depth_xyz" default="0 0 0" />

  <xacro:arg name="real_rpy" default="0 0 ${M_PI}" />
  <xacro:arg name="real_optical_rpy" default="${-M_PI2} 0 ${-M_PI2}" />
  <xacro:arg name="real_depth_rpy" default="${-M_PI2} 0 ${-M_PI2}" />
  <xacro:arg name="realsense_meshfile" default="package://unicorn_description/meshes/real_sense.STL" />


  <!-- Lift -->


 <!-- Main Body-base -->
  <link
    name="chassis_link">
    <visual>
      <origin
        xyz="0 0 0"
        rpy="0 0 0" />
      <geometry>
        <mesh
          filename="package://unicorn_description/meshes/chassis_link.STL" />
      </geometry>
      <material
        name="">
        <color
          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
      </material>
    </visual>
  </link>

<!-- Lift -->
  <link
    name="lift_link">
    <inertial>
      <origin
        xyz="0 0 0"
        rpy="0 0 0" />
      <mass
        value="10" />
      <inertia
        ixx="1"
        ixy="0"
        ixz="3"
        iyy="3"
        iyz="3"
        izz="1" />
    </inertial>-
    <visual>
      <origin
        xyz="0 0 0"
        rpy="0 0 ${M_PI}" />
      <geometry>
        <mesh
          filename="package://unicorn_description/meshes/lift_link.STL" />
      </geometry>
      <material
        name="">
        <color
          rgba="0.752941176470588 0.752941176470588 0.752941176470588 1" />
      </material>
    </visual>
      <surface>
        <friction>
          <ode>
            <mu>0.5</mu>
            <mu2>0.5</mu2>
          </ode>
        </friction>
      </surface>
    <collision>
      <origin
        xyz="0 0 0"
        rpy="0 0 ${M_PI}" />
      <geometry>
        <mesh
          filename="package://unicorn_description/meshes/lift_link.STL" />
      </geometry>
    </collision>
  </link>

  <joint
    name="lift_joint"
    type="fixed">
    <origin
      xyz="0 0 0"
      rpy="0 0 ${M_PI}" />
    <parent
      link="chassis_link" />
    <child
      link="lift_link" />
    <axis
      xyz="0 0 0" />
    <joint_properties damping="1" friction="0.5" />
  </joint>



  <link
    name="lift_horizontal_link">
    <visual>
      <origin
        xyz="0 0 0"
        rpy="0 0 0" />
      <geometry>
        <mesh
          filename="package://unicorn_description/meshes/lift_horizontal_link.STL" />
      </geometry>
      <material
        name="">
        <color
          rgba="0.898039215686275 0.917647058823529 0.929411764705882 1" />
      </material>
    </visual>
      <surface>
        <friction>
          <ode>
            <mu>0.5</mu>
            <mu2>0.5</mu2>
          </ode>
        </friction>
      </surface>
    <collision>
      <origin
        xyz="0 0 0"
        rpy="0 0 0" />
      <geometry>
        <mesh
          filename="package://unicorn_description/meshes/lift_horizontal_link.STL" />
      </geometry>
    </collision>
    <inertial>
      <origin
        xyz="0 0 0"
        rpy="0 0 0" />
      <mass
        value="1.50791731426345" />
      <inertia
        ixx="0.00998369504134607"
        ixy="1.05918049885466E-06"
        ixz="-3.20101525315815E-06"
        iyy="0.0148024039374132"
        iyz="1.02762580499191E-05"
        izz="0.0197484509547163" />
    </inertial>
  </link>


  <link
    name="lift_vertical_link">
    <inertial>
      <origin
        xyz="-0.0046764 0.62992 -0.22573"
        rpy="0 0 0" />
      <mass
        value="0.61742" />
      <inertia
        ixx="0.00029455"
        ixy="9.8754E-10"
        ixz="2.0681E-19"
        iyy="0.00411"
        iyz="3.0422E-05"
        izz="0.0043679" />
    </inertial>
    <visual>
      <origin
        xyz="0 0 0"
        rpy="0 0 0" />
      <geometry>
        <mesh
          filename="package://unicorn_description/meshes/lift_vertical_link.STL" />
      </geometry>
      <material
        name="">
        <color
          rgba="1 0.69412 0.27843 1" />
      </material>
    </visual>
    <collision>
      <origin
        xyz="0 0 0"
        rpy="0 0 0" />
      <geometry>
        <mesh
          filename="package://unicorn_description/meshes/lift_vertical_link.STL" />
      </geometry>
    </collision>
  </link>

  <joint
    name="lift_vertical_joint"
    type="prismatic">
    <origin
      xyz="0 -0.16 0"
      rpy="0 0 0" />
    <parent
      link="lift_horizontal_link" />
    <child
      link="lift_vertical_link" />
    <axis
      xyz="0 1 0" />
    <limit
      lower="0"
      upper="0.16"
      effort="100"
      velocity="0.4" />
      <joint_properties damping="10" friction="0.5" />
  </joint>

  <gazebo reference="lift_vertical_joint">
      <mu1 value="10000.0" />
      <mu2 value="10000.0" />
      <kp value="100000.0" />
      <kd value="10000.0" />
      <dampingFactor value="0.5" />
      <fdir1 value="1 0 0" />
      <material>Gazebo/Black</material>
      <turnGravityOff>false</turnGravityOff>
  </gazebo>


  <wheel fb="back" lr="left" parent="lift_link"  translateY="0.24" translateX="0" translateZ="0.1225" wheel_radius="0.1225" wheel_height="0.032" flip="1"/>
  <wheel fb="back" lr="right" parent="lift_link" translateY="-0.24" translateX="0 " translateZ="0.1225" wheel_radius="0.1225" wheel_height="0.032" flip="1"/>


  <!-- others wheels -->
  <swivel_wheel fb="front" lr="left" parent="chassis_link" translateY="0.16" translateX="-0.355" translateZ="0.1531" wheel_radius="0.05" wheel_height="0.05" flip="0"/>
  <swivel_wheel fb="front" lr="right" parent="chassis_link" translateY="-0.16" translateX="-0.355" translateZ="0.1531" wheel_radius="0.05" wheel_height="0.05" flip="0"/>



 <!-- Front Lidar -->
  <lidar_gazebo frame="base_laser" topic="frontLidar/scan" simulation="$(arg sim)" sample_size="800" min_angle="-2.35619" max_angle="2.35619" robot_namespace="$(arg robot_namespace)" filename="$(arg frontlidar_meshfile)" />

  <joint name="laser_mount_joint" type="fixed">
    <origin xyz="$(arg laser_xyz)" rpy="$(arg laser_rpy)" />
    <parent link="chassis_link" />
    <child link="base_laser" />
  </joint>


   <!-- Back Lidar -->
  <lidar_gazebo frame="rear_laser" topic="rearLidar/scan" simulation="$(arg sim)" sample_size="11" min_angle="-0.767944871" max_angle="0.767944871" robot_namespace="$(arg robot_namespace)" filename="$(arg rearlidar_meshfile)"/>

  <joint name="rear_laser_mount_joint" type="fixed">
    <origin xyz="$(arg rear_laser_xyz)" rpy="$(arg rear_laser_rpy)" />
    <parent link="chassis_link" />
    <child link="rear_laser" />
  </joint>


  <!-- Zed Camera -->
<!-- Camera Center -->
    <joint name="zed_camera_center_joint" type="fixed">
        <parent link="chassis_link"/>
        <child link="zed_camera_center"/>
        <origin xyz="$(arg zed_xyz)" rpy="0 0 0" />
    </joint>

    <link name="zed_camera_center">
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <mesh filename="$(arg zed_meshfile)" />
            </geometry>
        </visual>
    </link>

<!-- Left Camera -->
    <joint name="zed_left_camera_joint" type="fixed">
        <parent link="zed_camera_center"/>
        <child link="zed_left_camera_frame"/>
        <origin xyz="0 0.06 0" rpy="0 0 0" />
    </joint>

    <link name="zed_left_camera_frame" />

    <joint name="zed_left_camera_optical_joint" type="fixed">
        <origin xyz="0 0 0" rpy="-${M_PI/2} 0.0 -${M_PI/2}"/>
        <parent link="zed_left_camera_frame"/>
        <child link="zed_left_camera_optical_frame"/>
    </joint>

    <link name="zed_left_camera_optical_frame"/>

<!-- Right Camera -->
    <joint name="zed_right_camera_joint" type="fixed">
        <parent link="zed_camera_center"/>
        <child link="zed_right_camera_frame"/>
        <origin xyz="0 -0.06 0" rpy="0 0 0" />
    </joint>

    <link name="zed_right_camera_frame" />

    <joint name="zed_right_camera_optical_joint" type="fixed">
        <origin xyz="0 0 0" rpy="-${M_PI/2} 0.0 -${M_PI/2}"/>
        <parent link="zed_right_camera_frame"/>
        <child link="zed_right_camera_optical_frame"/>
    </joint>

    <link name="zed_right_camera_optical_frame"/>
<!---->
<xacro:if value="$(arg sim)">
    <stereo_camera frame_rgb="zed_camera_center" frame_depth="zed_depth_dummy_frame_sim_only" cameraName="zed"  topic="pointcloud" robot_namespace="$(arg robot_namespace)"/>

    <link name="zed_depth_dummy_frame_sim_only"></link>

    <joint name="zed_camera_depth_joint" type="fixed">
      <origin xyz="0 0 0" rpy="${-pi/2} 0 ${-pi/2}"/>
      <parent link="zed_camera_center"/>
      <child link="zed_depth_dummy_frame_sim_only"/>
    </joint>
</xacro:if>


  <!-- realsense Camera -->
<!-- Links only needed in simulation, created by realsense software otherwise-->

  <link
    name="realsense_link">
      <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
          <mesh filename="$(arg realsense_meshfile)" />
      </geometry>
    </visual>
  </link>

  <joint name="realsense_joint" type="fixed">
    <origin xyz="$(arg real_base)" rpy="$(arg real_rpy)"/>
    <parent link="chassis_link"/>
    <child link="realsense_link"/>
  </joint>



<xacro:if value="$(arg sim)">
  <stereo_camera frame_rgb="realsense_color_frame" frame_depth="realsense_depth_dummy_frame_sim_only" cameraName="realsense" topic="pointcloud" robot_namespace="$(arg robot_namespace)"/>

  <link name="realsense_color_frame"> </link>

  <link name="realsense_depth_frame"></link>

   <link name="realsense_depth_dummy_frame_sim_only"></link>

  <link
    name="realsense_depth_optical_frame">
  </link>

  <link
    name="realsense_color_optical_frame">
  </link>


  <joint name="realsense_gb_joint" type="fixed">
    <origin xyz="$(arg real_rgb_xyz)" rpy="0 0 0"/>
    <parent link="realsense_link"/>
    <child link="realsense_color_frame"/>
  </joint>

  <joint name="realsense_depth_joint" type="fixed">
    <origin xyz="$(arg real_depth_xyz)" rpy="0 0 0"/>
    <parent link="realsense_link"/>
    <child link="realsense_depth_frame"/>
  </joint>

  <joint name="realsense_depth_dummy_joint" type="fixed">
    <origin xyz="$(arg real_depth_xyz)" rpy="-${M_PI/2} 0.0 -${M_PI/2}"/>
    <parent link="realsense_link"/>
    <child link="realsense_depth_dummy_frame_sim_only"/>
  </joint>

  <joint name="realsense_optical_color_joint" type="fixed">
    <origin xyz="0 0 0" rpy="$(arg real_optical_rpy)"/>
    <parent link="realsense_color_frame"/>
    <child link="realsense_color_optical_frame"/>
  </joint>

  <joint name="realsense_optical_depth_joint" type="fixed">
    <origin xyz="0 0 0" rpy="$(arg real_depth_rpy)"/>
    <parent link="realsense_depth_frame"/>
    <child link="realsense_depth_optical_frame"/>
  </joint>
</xacro:if>


  <joint name="lift_horizontal_joint" type="prismatic">
    <parent  link="lift_link" />
    <child  link="lift_horizontal_link" />
    <origin xyz="0.05 0 0.137" rpy="${M_PI2} 0 ${-M_PI2}" />
    <axis xyz="0 0.0024714 -1" rpy="0 0 0"  />
    <limit lower="0.17" upper="0" effort="100" velocity="100" />
    <joint_properties damping="1000" friction="0.5" />
  </joint>


  <gazebo reference="lift_horizontal_joint">
      <mu1 value="10000.0" />
      <mu2 value="10000.0" />
      <kp value="100000.0" />
      <kd value="10000.0" />
      <dampingFactor value="0.5" />
      <fdir1 value="1 0 0" />
      <material>Gazebo/Black</material>
      <turnGravityOff>false</turnGravityOff>
  </gazebo>

  <transmission name="lift_horizontal_joint_trans">
      <type>transmission_interface/SimpleTransmission</type>
      <joint name="lift_horizontal_joint">
        <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
      </joint>
      <actuator name="lift_horizontal_joint_motor">
        <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
        <mechanicalReduction>5</mechanicalReduction>
      </actuator>
  </transmission>


  <transmission name="lift_vertical_joint_trans">
      <type>transmission_interface/SimpleTransmission</type>
      <joint name="lift_vertical_joint">
        <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
      </joint>
      <actuator name="lift_vertical_joint_motor">
        <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
        <mechanicalReduction>5</mechanicalReduction>
      </actuator>
  </transmission>

<xacro:if value="$(arg sim)">
  <!-- GAZEBO STUFF -->
  <gazebo>
     <!-- Husqvarna Wheel encoders -->
    <plugin name="automower_gazebo_controller" filename="libam_gazebo_controller_2wd.so">
      <alwaysOn>true</alwaysOn>
      <updateRate>50.0</updateRate>
      <leftJoint>back_right_wheel_joint</leftJoint>
      <rightJoint>back_left_wheel_joint</rightJoint>
      <wheelSeparation>0.4645</wheelSeparation>
      <wheelDiameter>0.245</wheelDiameter>
      <wheelTorque>100</wheelTorque>
      <commandTopic>cmd_vel</commandTopic>
      <odometryTopic>wheel_encoder/odom</odometryTopic>
      <odometryFrame>odom_chassis</odometryFrame>
      <robotBaseFrame>chassis_link</robotBaseFrame>
      <publishWheelTF>false</publishWheelTF>
      <publishOdomTF>false</publishOdomTF>
      <publishWheelJointState>false</publishWheelJointState>


      <gaussianNoise>0.1</gaussianNoise>
      <accelDrift>0.5 0.5 0.5</accelDrift>
      <accelGaussianNoise>0.35 0.35 0.3</accelGaussianNoise>
      <rateDrift>0.1 0.1 0.1</rateDrift>
      <rateGaussianNoise>0.05 0.05 0.015</rateGaussianNoise>
      <headingDrift>0.1</headingDrift>
      <headingGaussianNoise>1.00</headingGaussianNoise>
    </plugin>

    <!-- Fake UWB -->
    <plugin name="p3d_base_controller" filename="libgazebo_ros_p3d.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>50.0</updateRate>
        <bodyName>chassis_link</bodyName>
        <topicName>uwb</topicName>
        <gaussianNoise>0.1</gaussianNoise>
        <frameName>map</frameName>
        <xyzOffset>0 0 0</xyzOffset>
        <rpyOffset>0 0 0</rpyOffset>
      </plugin>
    <!-- Fake Imu -->
    <plugin name="imu_plugin" filename="libhector_gazebo_ros_imu.so">
      <alwaysOn>true</alwaysOn>
      <bodyName>zed_camera</bodyName>
      <topicName>zed/imu</topicName>
      <serviceName>imu_service</serviceName>
      <updateRate>100.0</updateRate>
      <rpyOffsets>0 0 0</rpyOffsets>
  <!---->
        <gaussianNoise>0.1</gaussianNoise>
        <accelDrift>0.1 0.1 0.1</accelDrift>
        <accelGaussianNoise>0.35 0.35 0.3</accelGaussianNoise>
        <rateDrift>0.1 0.1 0.1</rateDrift>
        <rateGaussianNoise>0.05 0.05 0.015</rateGaussianNoise>
        <headingDrift>0.1</headingDrift>
        <headingGaussianNoise>1.00</headingGaussianNoise>
  <!-- deprecated
      <gaussianNoise>0.0</gaussianNoise>
        <accelDrift>0.0 0.0 0.0</accelDrift>
        <accelGaussianNoise>0.0 0.0 0.0</accelGaussianNoise>
        <rateDrift>0.0 0.0 0.0</rateDrift>
        <rateGaussianNoise>0.0 0.0 0.0</rateGaussianNoise>
        <headingDrift>0.0</headingDrift>
        <headingGaussianNoise>0.00</headingGaussianNoise>-->
    </plugin>
    <!-- Joint controll plugin -->
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so" />
    <!-- gazebo wheel encoders -->
    <plugin name="am_gazebo_wheelencoder" filename="libam_gazebo_wheelencoder.so">
  </plugin>

  </gazebo>
</xacro:if>



</robot>
