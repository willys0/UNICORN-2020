<?xml version="1.0" encoding="utf-8"?>
<launch>

	<!-- roslaunch arguments -->
	<arg name="scan_topic" 			default="/frontLidar/scan"/>
	<arg name="map_file"   			default="$(find unicorn_slam)/maps/c2.yaml"/>

	<arg name="do_slam" 	        default="true" />

	<arg name="use_zed"						default="true" />
	<arg name="use_realsense"			default="true" />

	<arg name="use_object_tracking" default="false" />

	<arg name="sim" 				default="false" />


	<include file="$(find unicorn)/launch/components/control.launch" >
		<arg name="sim" value="$(arg sim)" />
	</include>

	<group unless="$(arg sim)">
		<include file="$(find unicorn)/launch/components/sensors.launch">
			<arg name="use_zed" value="$(arg use_zed)" />
			<arg name="use_realsense" value="$(arg use_realsense)" />
		</include>

		<include file="$(find unicorn_roborio_bridge)/launch/bridge.launch" />
	</group>

	<include file="$(find unicorn)/launch/components/voxel_filter.launch">
		<arg name="input_pointcloud_topic" value="/zed/depth/points"/>
		<arg name="output_pointcloud_topic" value="/zed/depth/points_filtered"/>
		<arg name="sim" value="$(arg sim)" />
	</include>

	<include file="$(find unicorn_localization)/launch/localization.launch">
		<arg name="sim" value="$(arg sim)" />

		<arg name="use_amcl" value="true"  unless="$(arg do_slam)" />
		<arg name="use_amcl" value="false" if="$(arg do_slam)" />

		<arg name="scan_topic" value="$(arg scan_topic)" />
	</include>

	<include file="$(find unicorn_navigation)/launch/move_base.launch" >
		<arg name="global_frame" value="map" />
		<arg unless="$(arg sim)" name="robot_base_frame" value="base_link" />
		<arg if="$(arg sim)" name="robot_base_frame" value="chassis_link" />
	</include>

	<group if="$(arg do_slam)">
		<include file="$(find unicorn_slam)/launch/gmapping.launch">
			<arg name="scan_topic" value="$(arg scan_topic)" />
		</include>
	</group>

	<group unless="$(arg do_slam)">
		<!-- Christian: not sure wtf this does -->
		<rosparam param="global_local">false</rosparam>

		<!-- Run the map server -->
		<node pkg="map_server" type="map_server" args="$(arg map_file)" respawn="true" name="map" />
		<node pkg="tf" type="static_transform_publisher" name="map_transform" args="0 0 0 0 0 0 /map /odom_chassis 100"/>

	</group>

	<include file="$(find unicorn_state_machine)/launch/state_machine.launch">
		<arg unless="$(arg sim)" name="robot_base_frame" value="base_link" />
		<arg if="$(arg sim)" name="robot_base_frame" value="chassis_link" />
	</include>

	<!--include unless="$(arg sim)" file="$(find unicorn_intention)/launch/intention.launch"-->
	<include file="$(find unicorn_intention)/launch/intention.launch" >
		<arg name="unicorn_state_topic" 	value="/unicorn_state_machine_node/current_state" />
		<arg name="intention_angle_topic" 	value="/TX2_localplanner_intention" />
		<arg name="led_state_topic" 		value="/TX2_unicorn_state" />

	</include>


	<!-- load joint controller configurations from YAML file to parameter server -->
	<rosparam file="$(find am_control)/config/joint_position_control.yaml" command="load" />

	<!-- publish all the frames to TF -->

	<group if="$(arg sim)">
		<include file="$(find unicorn_simulator)/launch/gazebo.launch" />
	</group>

	<param unless="$(arg sim)" name="robot_description" command="$(find xacro)/xacro.py '$(find unicorn_description)/urdf/unicorn_target.urdf.xacro'" />

	<node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher">
		<param name="publish_frequency" value="100"/>
	</node>

	<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
		<param name="use_gui" value="false"/>
		<param name="rate" value="100"/>
	</node>

</launch>
