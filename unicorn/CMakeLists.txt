cmake_minimum_required(VERSION 2.8.3)
project(unicorn)

## Compile as C++11, supported in ROS Kinetic and newer
add_compile_options(-std=c++11)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  roscpp
  rospy
  std_msgs
  nav_msgs
  actionlib
  actionlib_msgs
  tf
  tf2
  geometry_msgs
  message_generation 
  genmsg
  move_base_msgs
)

## System dependencies are found with CMake's conventions
#find_package(Boost REQUIRED)
#find_package(rostest REQUIRED)
#find_package(GTest REQUIRED)

## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend tag for "message_generation"
##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in
##     but can be declared for certainty nonetheless:
##     * add a run_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
# add_message_files(
#   FILES
#   Message1.msg
#   Message2.msg
# )

add_message_files(
  FILES
  command.msg
  masterMessage.msg
)

## Generate services in the 'srv' folder
  add_service_files(
  	DIRECTORY
  	srv
    FILES
    CharlieCmd.srv
 )

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
  generate_messages(
   DEPENDENCIES
   std_msgs
   geometry_msgs
 )

################################################
## Declare ROS dynamic reconfigure parameters ##
################################################

## To declare and build dynamic reconfigure parameters within this
## package, follow these steps:
## * In the file package.xml:
##   * add a build_depend and a run_depend tag for "dynamic_reconfigure"
## * In this file (CMakeLists.txt):
##   * add "dynamic_reconfigure" to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * uncomment the "generate_dynamic_reconfigure_options" section below
##     and list every .cfg file to be processed

## Generate dynamic reconfigure parameters in the 'cfg' folder
# generate_dynamic_reconfigure_options(
#   cfg/DynReconf1.cfg
#   cfg/DynReconf2.cfg
# )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
 INCLUDE_DIRS include
# LIBRARIES unicorn
 CATKIN_DEPENDS roscpp rospy std_msgs nav_msgs actionlib actionlib_msgs tf geometry_msgs message_runtime move_base_msgs
#  DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
include_directories(
  include
  ${catkin_INCLUDE_DIRS}
  ${GTEST_INCLUDE_DIRS}
)

## Declare a C++ library
# add_library(${PROJECT_NAME}
#   src/${PROJECT_NAME}/unicorn.cpp
# )

#add_executable(laser_scan_filter src/laser_scan_filter.cpp)
#target_link_libraries(laser_scan_filter ${catkin_LIBRARIES})

add_executable(am_unicorn_interface src/am_unicorn_interface.cpp)
target_link_libraries(am_unicorn_interface ${catkin_LIBRARIES})
add_dependencies(am_unicorn_interface ${PROJECT_NAME}_generate_messages_cpp)

#add_executable(unicorn_statemachine src/unicorn_statemachine.cpp)
#add_dependencies(unicorn_statemachine ${catkin_EXPORTED_TARGETS})
#add_library(unicorn_statemachine_lib src/unicorn_statemachine.cpp)
#target_link_libraries(unicorn_statemachine ${catkin_LIBRARIES})

#add_executable(range_sensor_driver src/range_sensor_driver.cpp)
#target_link_libraries(range_sensor_driver ${catkin_LIBRARIES})

add_library(state_lib
  include/unicorn/aligning_state.h src/aligning_state.cpp
  include/unicorn/reversing_state.h src/reversing_state.cpp
  include/unicorn/idle_state.h src/idle_state.cpp
  include/unicorn/navigating_state.h src/navigating_state.cpp
  include/unicorn/lifting_state.h src/lifting_state.cpp
  include/unicorn/state_factory.h src/state_factory.cpp
  include/unicorn/state_structures.h
  include/unicorn/state_machine.h
  )
add_dependencies(state_lib ${catkin_EXPORTED_TARGETS} ${PROJECT_NAME}_generate_messages_cpp)

add_library(pid_controller_lib src/pid_controller.cpp)

add_executable(unicorn_statemachine src/state_machine.cpp)
add_dependencies(unicorn_statemachine unicorn_generate_messages_cpp ${catkin_EXPORTED_TARGETS})
target_link_libraries(unicorn_statemachine ${catkin_LIBRARIES} pid_controller_lib state_lib)

## Add cmake target dependencies of the library
## as an example, code may need to be generated before libraries
## either from message generation or dynamic reconfigure
# add_dependencies(${PROJECT_NAME} ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Declare a C++ executable
## With catkin_make all packages are built within a single CMake context
## The recommended prefix ensures that target names across packages don't collide
# add_executable(${PROJECT_NAME}_node src/unicorn_node.cpp)

## Rename C++ executable without prefix
## The above recommended prefix causes long target names, the following renames the
## target back to the shorter version for ease of user use
## e.g. "rosrun someones_pkg node" instead of "rosrun someones_pkg someones_pkg_node"
# set_target_properties(${PROJECT_NAME}_node PROPERTIES OUTPUT_NAME node PREFIX "")

## Add cmake target dependencies of the executable
## same as for the library above
# add_dependencies(${PROJECT_NAME}_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Specify libraries to link a library or executable target against
# target_link_libraries(${PROJECT_NAME}_node
#   ${catkin_LIBRARIES}
# )

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
# install(TARGETS ${PROJECT_NAME} ${PROJECT_NAME}_node
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
##############
catkin_add_gtest(unicorn-test test/test_unicorn.cpp)
#target_link_libraries(unicorn-test ${catkin_LIBRARIES})

#add_executable(unicorn-test test/test_unicorn.cpp)
#target_link_libraries(unicorn-test ${GTEST_LIBRARIES} pthread)
#add_rostest_gtest(unicorn-tests test/test_unicorn.test test/test_unicorn.cpp)
target_link_libraries(unicorn-test ${catkin_LIBRARIES} ${GTEST_LIBRARIES} unicorn_statemachine_lib)
#add_dependencies(unicorn-test unicorn_statemachine ${catkin_EXPORTED_TARGETS})
## Add gtest based cpp test target and link libraries
#add_dependencies(unicorn-test ${catkin_EXPORTED_TARGETS})
#target_link_libraries(Unicorn-test unicorn_statemachine)
#if(TARGET ${PROJECT_NAME}-test)
#  target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME}_statemachine)
#endif()

#target_link_libraries(unicorn-test ${catkin_LIBRARIES})
# catkin_add_gtest(utest test/utest.cpp)
## Add folders to be run by python nosetests
# catkin_add_nosetests(test)


